{"prompt":"double sumArrPar_01(int arr[]){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$double s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t] += arr[i];$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$$<n>$ ->", "completion":"double sumArrPar_02(int arr[]){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$int PADDING = 8;$<n>$double s_priv[nthreads * PADDING] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t * PADDING] += arr[i];$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i * PADDING];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ##"}
{"prompt":"double sumArraysPar_01(int arr1[], int arr2[]){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$double s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t] += arr1[i] + arr2[i];$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i];$<n>$}$<n>$$<n>$return total;}$<n>$ ->", "completion":"double sumArraysPar_02(int arr1[], int arr2[]){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$int PADDING = 8;$<n>$double s_priv[nthreads * PADDING] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t * PADDING] += arr1[i] + arr2[i];$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i * PADDING];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ##"}
{"prompt":"double multArraysPar_01(int arr1[], int arr2[]){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$double s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t] += arr1[i] * arr2[i];$<n>$}$<n>$$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ->", "completion":"double multArraysPar_02(int arr1[], int arr2[]){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$int PADDING = 8;$<n>$double s_priv[nthreads * PADDING] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t * PADDING] += arr1[i] * arr2[i];$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i * PADDING];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ##"}
{"prompt":"double squareSumArraysPar_01(int arr1[], int arr2[]){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$double s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t] += arr1[i] * arr1[i] + arr2[i] * arr2[i];$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ->", "completion":"double squareSumArraysPar_02(int arr1[], int arr2[]){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$int PADDING = 8;$<n>$double s_priv[nthreads * PADDING] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t * PADDING] += arr1[i] * arr1[i] + arr2[i] * arr2[i];$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i * PADDING];$<n>$}$<n>$$<n>$return total;}$<n>$ ##"}
{"prompt":"double multSumArrScalarPar_01(int arr[], int scalar){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$double s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t] += arr[i] * scalar;$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ->", "completion":"double multSumArrScalarPar_02(int arr[], int scalar){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$int PADDING = 8;$<n>$double s_priv[nthreads * PADDING] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t * PADDING] += arr[i] * scalar;$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i * PADDING];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ##"}
{"prompt":"double divSumArrScalarPar_01(int arr[], int scalar){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$double s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t] += arr[i] / scalar;$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ->", "completion":"double divSumArrScalarPar_02(int arr[], int scalar){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$int PADDING = 8;$<n>$double s_priv[nthreads * PADDING] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$s_priv[t * PADDING] += arr[i] / scalar;$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i * PADDING];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ##"}
{"prompt":"double calculatePiPar_01(){$<n>$$<n>$static long num_steps = 100000;$<n>$double step;$<n>$double x;$<n>$double pi;$<n>$step = 1.0/(double) num_steps;$<n>$$<n>$int nthreads = 16;$<n>$double s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$$<n>$#pragma omp for$<n>$for (int i = 0; i < num_steps; i++){$<n>$x = (i + 0.5) * step;$<n>$s_priv[t] += 4.0 / (1.0 + x*x);$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$pi += step * s_priv[i];$<n>$}$<n>$$<n>$return pi;$<n>$}$<n>$ ->", "completion":"double calculatePiPar_02(){$<n>$$<n>$static long num_steps = 100000;$<n>$double step;$<n>$double x;$<n>$double pi;$<n>$step = 1.0/(double) num_steps;$<n>$$<n>$int nthreads = 16;$<n>$int PAD = 8;$<n>$double s_priv[nthreads * PAD] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$$<n>$#pragma omp for$<n>$for (int i = 0; i < num_steps; i++){$<n>$x = (i + 0.5) * step;$<n>$s_priv[t * PAD] += 4.0 / (1.0 + x*x);$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$pi += step * s_priv[i * PAD];$<n>$}$<n>$$<n>$return pi;$<n>$}$<n>$ ##"}
{"prompt":"int maxArrPar_01(int arr[]){$<n>$int nthreads = 16;$<n>$int result = 0;$<n>$int s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$int maxVal = -1;$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$if (arr[i] > maxVal){$<n>$maxVal = arr[i];$<n>$s_priv[t] = arr[i];$<n>$}$<n>$}$<n>$}$<n>$$<n>$int temp = -1;$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$if (s_priv[i] > temp){$<n>$temp = s_priv[i];$<n>$result = temp;$<n>$}$<n>$}$<n>$$<n>$return result;$<n>$}$<n>$ ->", "completion":"int maxArrPar_02(int arr[]){$<n>$$<n>$int nthreads = 16;$<n>$int result = 0;$<n>$int PAD = 8;$<n>$int s_priv[nthreads * PAD] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$int maxVal = -1;$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$if (arr[i] > maxVal){$<n>$maxVal = arr[i];$<n>$s_priv[t * PAD] = arr[i];$<n>$}$<n>$}$<n>$}$<n>$$<n>$int temp = -1;$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$if (s_priv[i * PAD] > temp){$<n>$temp = s_priv[i * PAD];$<n>$result = temp;$<n>$}$<n>$}$<n>$$<n>$return result;$<n>$}$<n>$ ##"}
{"prompt":"int minArrPar_01(int arr[]){$<n>$int nthreads = 16;$<n>$int result = 0;$<n>$int s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$int minVal = 9999;$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$if (arr[i] < minVal){$<n>$minVal = arr[i];$<n>$s_priv[t] = arr[i];$<n>$}$<n>$}$<n>$}$<n>$$<n>$int temp = 9999;$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$if (s_priv[i] < temp){$<n>$temp = s_priv[i];$<n>$result = temp;$<n>$}$<n>$}$<n>$$<n>$return result;$<n>$}$<n>$ ->", "completion":"int minArrPar_02(int arr[]){$<n>$$<n>$int nthreads = 16;$<n>$int result = 0;$<n>$int PAD = 8;$<n>$int s_priv[nthreads * PAD] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$int minVal = 9999;$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$if (arr[i] < minVal){$<n>$minVal = arr[i];$<n>$s_priv[t * PAD] = arr[i];$<n>$}$<n>$}$<n>$}$<n>$$<n>$int temp = 9999;$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$if (s_priv[i * PAD] < temp){$<n>$temp = s_priv[i * PAD];$<n>$result = temp;$<n>$}$<n>$}$<n>$$<n>$return result;$<n>$}$<n>$ ##"}
{"prompt":"int countArrScalarPar_01(int arr[], int scalar){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$double s_priv[nthreads] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$if (arr[i] == scalar){$<n>$s_priv[t]++;$<n>$}$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ->", "completion":"double countArrScalarPar_02(int arr[], int scalar){$<n>$int nthreads = 16;$<n>$double total = 0;$<n>$int PADDING = 8;$<n>$double s_priv[nthreads * PADDING] = {0};$<n>$$<n>$#pragma omp parallel num_threads(nthreads)$<n>${$<n>$int t = omp_get_thread_num();$<n>$#pragma omp for$<n>$for (int i = 0; i < ARRAY_SIZE; i++){$<n>$if (arr[i] == scalar){$<n>$s_priv[t * PADDING]++;$<n>$}$<n>$}$<n>$}$<n>$$<n>$for (int i = 0; i < nthreads; i++)$<n>${$<n>$total += s_priv[i * PADDING];$<n>$}$<n>$$<n>$return total;$<n>$}$<n>$ ##"}
