#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

struct Node {
    int data;
    struct Node* next;
};

typedef struct Node Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertNode(Node** head, int index, int data) {
    Node* newNode = createNode(data);

    if (*head == NULL || index == 0) {
        newNode->next = *head;
        *head = newNode;
    } else {
        Node* current = *head;
        for (int i = 0; i < index - 1; i++) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

void deleteNode(Node** head, int index) {
    if (*head == NULL) {
        return;
    }

    Node* temp = *head;

    if (index == 0) {
        *head = (*head)->next;
        free(temp);
        return;
    }

    Node* current = *head;
    for (int i = 0; current != NULL && i < index - 1; i++) {
        current = current->next;
    }

    if (current == NULL || current->next == NULL) {
        return;
    }

    Node* nextNode = current->next->next;
    free(current->next);
    current->next = nextNode;
}

void printLinkedList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int bar() {
    Node* x = NULL;

    int insertIndex = SIZE / 2;  // Insert at the middle
    int deleteIndex = SIZE / 4;  // Delete from the quarter

    // Insert an element
    insertNode(&x, insertIndex, -1);

    // Delete an element
    deleteNode(&x, deleteIndex);

    // Print the linked list
    printLinkedList(x);

    return 0;
}
