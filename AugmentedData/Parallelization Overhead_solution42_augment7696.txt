#include <stdio.h>
#include <omp.h>

#define nthreads 4
#define size 100000

int sharedResource = 0;

void updateSharedResource(int threadId) {
    int privateResource = 0;

    // Perform some computation on the private resource
    privateResource += threadId;

    // Update the shared resource atomically
    #pragma omp atomic
    sharedResource += privateResource;
}

int bar() {
    omp_set_num_threads(nthreads);

    #pragma omp parallel
    {
        int threadId = omp_get_thread_num();

        for (int i = 0; i < size; i++) {
            updateSharedResource(threadId);
        }
    }

    printf("Final value of shared resource: %d\n", sharedResource);

    return 0;
}
