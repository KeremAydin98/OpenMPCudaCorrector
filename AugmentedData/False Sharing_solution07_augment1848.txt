double foo(){	
	
	static long N = 100000;	
	double step; 
	double x;
    double result;
	step = 1.0/(double) N;

	int nthreads = 16;
	int PADDING = 8;
	double s_priv[nthreads * PADDING] = {0};
	
	#pragma omp parallel num_threads(nthreads)
	{
		int t = omp_get_thread_num();

		#pragma omp for
		for (int i = 0; i < N; i++){
			x = (i + 0.5) * step;
			s_priv[t * PADDING] += 4.0 / (1.0 + x*x);
		}
	}
	
	for (int i = 0; i < nthreads; i++)
	{
		result += step * s_priv[i * PADDING];
	}
	
	return result;
}