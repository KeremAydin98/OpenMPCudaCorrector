#include <iostream>
#include <omp.h>
#include <cmath>

int calculateDifference(int value, int mean) {
    return pow(value - mean, 2);
}

int <FUNC_NAME>() {

    int <PARAM_1>[<VAR_4>];
    int sum=0;
    int diff=0;

    #pragma omp parallel for
    for(int i=0; i<<VAR_4>; i++){
        <PARAM_1>[i] = rand() % 100;
    }

    #pragma omp parallel for reduction(+:diff)
    for(int i=0; i<<VAR_4>; i++){
        sum += <PARAM_1>[i];
    }

    double mean = sum / (double)<VAR_4>;

    #pragma omp parallel for reduction(+:diff)
    for (int i = 0; i < <VAR_4>; i++) {
        diff += calculateDifference(<PARAM_1>[i], mean);
    }

    std::cout << "Variance : " << diff / (double)<VAR_4> - 1 << std::endl;

    return 0;
}